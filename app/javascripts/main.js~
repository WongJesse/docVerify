var accounts;
var account;
var doc;
var hash;

function initialContract(){
	doc = DocumentVerify.deployed();
	
};

function docVerify(){
console.log(1111);
	doc.documentExists.call(hash).then(
		function(res){
			if(res == true)
				alert("文件已经在区块链中被确认！认证成功！");
			else{
				doc.newDocument(hash,{from: accounts[0]}).then(function(){
				if(doc.getLatest.call() == 1)
					alert("文件确认成功！");
				else alert("66666");}).catch(function(e){
				console.log(e)});
				}
		});
};
$('document').ready(function(){
	// $('.local-file-info').hide();
	// 导航设置
	$('#myTab a').click(function (e) {
	  e.preventDefault();
	  $(this).tab('show');
	})

	// 文件上传的读取操作
	$('#selectedFile').change(function(e){
		var fileReader = new FileReader(),
			blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice,  
	        file = e.target.files[0],  
	        chunkSize = 2097152,  
	        // read in chunks of 2MB  
	        chunks = Math.ceil(file.size / chunkSize),  
	        currentChunk = 0,  
	        spark = new SparkMD5();  
			hash = spark;

  		console.log(file);
  		$('.local-file-info').show();
	    $('.file-name').text(file.name);
	    $('.file-size').text(file.size);

	    var lastModifiedDate = new Date(file.lastModified);
	    $('.file-lastmodified').text(lastModifiedDate.toLocaleString());

  		// 启动读操作
  		loadNext();
  		// 读取完毕
  		fileReader.onload = function(e) {  
	        spark.appendBinary(e.target.result); // append binary string  
	        currentChunk++;  
	  
	        if (currentChunk < chunks) {  
	            loadNext();  
	        }  
	        else {  
	            $('.file-hash').text(spark.end());  
	        }  
	    };  

	    function loadNext() {  
	        var start = currentChunk * chunkSize,  
	            end = start + chunkSize >= file.size ? file.size : start + chunkSize;  
	  
	        fileReader.readAsBinaryString(blobSlice.call(file, start, end));  
	    }; 
	});
})


window.onload = function() {

	if (typeof web3 !== 'undefined') {
    var web3 = new Web3(web3.currentProvider);
} else {
  // set the provider you want from Web3.providers
  var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
}
  web3.eth.getAccounts(function(err, accs) {
    if (err != null) {
      alert("There was an error fetching your accounts.");
      return;
    }

    if (accs.length == 0) {
      alert("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
      return;
    }

    accounts = accs;
    account = accounts[0];

    initialContract();
  });
}
